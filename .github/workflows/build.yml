name: 'Build and Release'

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  release:
    types: [created]

# Allow one concurrent deployment
concurrency:
  group: 'build-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could also use ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm' # Set this to npm, yarn or pnpm.

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install # change this to npm or pnpm depending on which one you use.

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          args: ${{ matrix.args }}
          # Only create release on actual releases, not on every push
          releaseDraft: ${{ github.event_name == 'release' }}
          releaseBody: |
            ## What's Changed
            
            See the full changelog: https://github.com/${{ github.repository }}/commits/${{ github.sha }}
            
            ## Installation
            
            ### Windows
            - Download and run the `.msi` installer
            - Or use the portable `.exe` version
            
            ### macOS
            - Download and install the `.dmg` file
            - For Apple Silicon Macs (M1/M2): Use the `aarch64` version
            - For Intel Macs: Use the `x86_64` version
            
            ### Linux
            - Download the `.AppImage` file and make it executable
            - Or install the `.deb` package on Debian/Ubuntu systems
            
            ## Notes
            - Built with Tauri v1
            - This is an automated release created from commit: ${{ github.sha }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: github.event_name != 'release'
        with:
          name: tauri-app-${{ matrix.platform }}
          path: |
            src-tauri/target/release/bundle/
            !src-tauri/target/release/bundle/**/.*